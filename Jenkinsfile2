pipeline{
 agent any
  tools{
    maven 'Maven'
  }
 environment {
	DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    }
  stages{
    stage('Initialize'){
      steps{
        sh '''       echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
            '''
          }
      }
    stage ('Build') {
      steps {
      sh 'mvn clean package'
      }
   }
  stage ('MOVING ARTIFACTS TO ANSIBLE') {
    steps{
      sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//home//ansadmin//playbook', remoteDirectorySDF: false, removePrefix: '/webapp/target', sourceFiles: '**/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
    }
  }
 stage ('MOVING DOCKERFILE TO ANSIBLE') {
    steps{
     sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//home//ansadmin//playbook', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'Dockerfile')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)]) 
  }
}
stage ('BUILD IMAGE IN  ANSIBLE') {
    steps{
       sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /home/ansadmin/playbook
       docker build -t $JOB_NAME:V1.$BUILD_ID .
       docker tag $JOB_NAME:V1.$BUILD_ID yaswanth650/$JOB_NAME:V1.$BUILD_ID
       docker tag $JOB_NAME:V1.$BUILD_ID yaswanth650/$JOB_NAME:latest ''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '//home//ansadmin//playbook', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
  }
stage ('PUSH TO DOCKERHUB') {
    steps{
      sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''docker push yaswanth650/$JOB_NAME:V1.$BUILD_ID         
      docker push yaswanth650/$JOB_NAME:latest
docker rmi  $JOB_NAME:V1.$BUILD_ID  yaswanth650/$JOB_NAME:V1.$BUILD_ID yaswanth650/$JOB_NAME:latest ''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
    }
   }
stage ('RON DOCKER CONTAINER') {
    steps{
    sshPublisher(publishers: [sshPublisherDesc(configName: 'ansible-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''ansible-playbook  /home/ansadmin/playbook/createdockercontainerversion.yml
    ''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
     }
   }
 }
}
